{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAEIA,E,kFCmCWC,G,wBAjCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAER,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBANP,E,sEASjBE,KAAKN,MAAMO,SAASD,KAAKL,MAAMC,Q,uCAGhBM,GACfF,KAAKG,SAAS,CACZP,KAAMM,EAAME,OAAOC,U,+BAKrB,OACE,yBAAKC,UAAU,aACb,2BACEC,SAAUP,KAAKD,iBACfS,YAAY,mCAEd,4BAAQC,QAAST,KAAKH,OAAQS,UAAU,gBAAxC,e,GA1BgBI,IAAMC,YC6CfC,G,8BA5Cb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KACDmB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBAHF,E,4EAMjB,OAAIE,KAAKN,MAAMqB,UAEX,4BAAQN,QAAST,KAAKc,YAAaR,UAAU,gBAA7C,KAMA,4BAAQG,QAAST,KAAKa,SAAUP,UAAU,gBAA1C,O,iCAQJN,KAAKN,MAAMsB,MAAMhB,KAAKN,MAAMuB,S,oCAI5BjB,KAAKN,MAAMwB,SAASlB,KAAKN,MAAMuB,S,+BAI/B,OACE,yBAAKX,UAAU,SACb,yBAAKA,UAAU,qBACb,4BAAKN,KAAKN,MAAMuB,MAAME,MACtB,2BACGnB,KAAKN,MAAMuB,MAAMG,OADpB,MAC+BpB,KAAKN,MAAMuB,MAAMI,QAGjDrB,KAAKsB,oB,GAvCMZ,IAAMC,YCqBXY,E,iLAnBH,IAAD,OACP,OACE,yBAAKjB,UAAU,aACZN,KAAKN,MAAM8B,OAAOC,IAAI,SAAAR,GACrB,OACE,kBAAC,EAAD,CACED,MAAO,EAAKtB,MAAMsB,MAClBC,MAAOA,EACPS,IAAKT,EAAMU,GACXT,SAAU,EAAKxB,MAAMwB,SACrBH,UAAW,EAAKrB,MAAMqB,mB,GAXZL,IAAMC,WCefiB,E,iLAbX,OACE,yBAAKtB,UAAU,iBACb,uCACA,kBAAC,EAAD,CACEU,MAAOhB,KAAKN,MAAMsB,MAClBD,WAAW,EACXS,OAAQxB,KAAKN,MAAMmC,qB,GARDnB,IAAMC,WC2BnBmB,G,kBA1Bb,WAAYpC,GAAQ,IAAD,8BACjB,4CAAMA,KACDqC,iBAAmB,EAAKA,iBAAiBjC,KAAtB,gBAFP,E,8EAKFI,GACfF,KAAKN,MAAMsC,aAAa9B,EAAME,OAAOC,S,+BAIrC,OACE,yBAAKC,UAAU,YACb,2BAAOC,SAAUP,KAAK+B,iBAAkBE,aAAc,gBACtD,kBAAC,EAAD,CACElB,WAAW,EACXG,SAAUlB,KAAKN,MAAMwB,SACrBM,OAAQxB,KAAKN,MAAMwC,iBAErB,4BAAQzB,QAAST,KAAKN,MAAMyC,OAAQ7B,UAAU,iBAA9C,wB,GAnBeI,IAAMC,YLAvByB,EAAU,CACdC,eADc,WAEZ,GAAI7C,EACF,OAAOA,EAGT,IAAM8C,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAElD,GAAIJ,GAAoBK,EAAgB,CACtCnD,EAAc8C,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAIxC,OAFAJ,OAAOO,WAAW,kBAAOtD,EAAc,IAAiB,IAAZoD,GAC5CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCxD,EAEP,IAAMyD,EAAS,2DArBJ,mCAqBI,0EApBD,2CAqBdV,OAAOC,SAAWS,GAItBpD,OAtBc,SAsBPD,GACL,IAAMJ,EAAc4C,EAAQC,iBAC5B,OAAOa,MAAM,kDAAD,OAAmDtD,GAAQ,CACrEuD,QAAS,CACPC,cAAc,UAAD,OAAY5D,MAG1B6D,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJ,OAAKA,EAAahC,OAGXgC,EAAahC,OAAOiC,MAAMhC,IAAI,SAAAR,GAAK,MAAK,CAC7CU,GAAIV,EAAMU,GACVR,KAAMF,EAAME,KACZC,OAAQH,EAAMyC,QAAQ,GAAGvC,KACzBE,MAAOJ,EAAMI,MAAMF,KACnBwC,IAAK1C,EAAM0C,OAPJ,MAWfC,aA7Cc,SA6CDzC,EAAM0C,GACjB,GAAK1C,GAAS0C,EAAUC,OAAxB,CAIA,IAEIC,EAFEvE,EAAc4C,EAAQC,iBACtBc,EAAU,CAAEC,cAAc,UAAD,OAAY5D,IAE3C,OAAO0D,MAAM,gCAAiC,CAAEC,QAASA,IACtDE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAEJ,OADAO,EAASP,EAAa7B,GACfuB,MAAM,oCAAD,OAAqCa,EAArC,cAAyD,CACnEZ,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEhD,KAAMA,MAE5BkC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAMY,EAAaZ,EAAa7B,GAChC,OAAOuB,MAAM,oCAAD,OAC0Ba,EAD1B,sBAC8CK,EAD9C,WAEV,CACEjB,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEE,KAAMR,aAQ9BzB,IMSAkC,E,YAnFb,WAAY5E,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXkC,cAAe,GACf0C,aAAc,cACdrC,eAAgB,IAElB,EAAKrB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBACnB,EAAK0E,mBAAqB,EAAKA,mBAAmB1E,KAAxB,gBAC1B,EAAK2E,aAAe,EAAKA,aAAa3E,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAZG,E,sEAeVmB,GACP,IAAIO,EAASxB,KAAKL,MAAMuC,eACpBV,EAAOkD,KAAK,SAAAC,GAAU,OAAIA,EAAWhD,KAAOV,EAAMU,OAGtDH,EAAOoD,KAAK3D,GACZjB,KAAKG,SAAS,CACZ+B,eAAgBV,O,kCAIRP,GACV,IAAIO,EAASxB,KAAKL,MAAMuC,eACxBV,EAASA,EAAOqD,OAAO,SAAAC,GAAY,OAAIA,EAAanD,KAAOV,EAAMU,KACjE3B,KAAKG,SAAS,CACZ+B,eAAgBV,M,yCAIDL,GACjBnB,KAAKG,SAAS,CACZoE,aAAcpD,M,qCAIF,IAAD,OACP0C,EAAY7D,KAAKL,MAAMuC,eAAeT,IAAI,SAAAR,GAAK,OAAIA,EAAM0C,MAC/DvB,EAAQwB,aAAa5D,KAAKL,MAAM4E,aAAcV,GAAWR,KAAK,WAC5D,EAAKlD,SAAS,CACZoE,aAAc,eACdrC,eAAgB,S,6BAKftC,GAAO,IAAD,OACXwC,EAAQvC,OAAOD,GAAMyD,KAAK,SAAAxB,GACxB,EAAK1B,SAAS,CAAE0B,cAAeA,Q,+BAKjC,OACE,6BACE,mCACM,0BAAMvB,UAAU,aAAhB,QADN,OAGA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAWL,SAAUD,KAAKH,SAC1B,yBAAKS,UAAU,gBACb,kBAAC,EAAD,CACEU,MAAOhB,KAAKa,SACZgB,cAAe7B,KAAKL,MAAMkC,gBAE5B,kBAAC,EAAD,CACEM,OAAQnC,KAAKyE,aACbzC,aAAchC,KAAKwE,mBACnBtD,SAAUlB,KAAKc,YACfyD,aAAcvE,KAAKL,MAAM4E,aACzBrC,eAAgBlC,KAAKL,MAAMuC,wB,GA3EvBxB,IAAMC,WCKJoE,QACW,cAA7BxC,OAAOC,SAASwC,UAEe,UAA7BzC,OAAOC,SAASwC,UAEhBzC,OAAOC,SAASwC,SAAStC,MACvB,2DCZNuC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.e68eeaf3.chunk.js","sourcesContent":["const clientId = \"b5e72b2bf9d64693af68615023cc32f6\";\r\nconst redirectUri = \"http://RoboC0de.github.io/playlistify1/\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n    // check for access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      // This clears the parameters, allowing us to grab a new access token when it expires.\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\");\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    })\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri\r\n        }));\r\n      });\r\n  },\r\n  savePlayList(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n    return fetch(`https://api.spotify.com/v1/me`, { headers: headers })\r\n      .then(response => response.json())\r\n      .then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: \"POST\",\r\n          body: JSON.stringify({ name: name })\r\n        })\r\n          .then(response => response.json())\r\n          .then(jsonResponse => {\r\n            const playlistId = jsonResponse.id;\r\n            return fetch(\r\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n              {\r\n                headers: headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({ uris: trackUris })\r\n              }\r\n            );\r\n          });\r\n      });\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\"\r\n    };\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n  search() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({\r\n      term: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input\r\n          onChange={this.handleTermChange}\r\n          placeholder=\"Enter A Song, Album, or Artist\"\r\n        />\r\n        <button onClick={this.search} className=\"SearchButton\">\r\n          SEARCH\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./Track.css\";\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return (\r\n        <button onClick={this.removeTrack} className=\"Track-action\">\r\n          -\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button onClick={this.addTrack} className=\"Track-action\">\r\n          +\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>\r\n            {this.props.track.artist} | {this.props.track.album}\r\n          </p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from \"react\";\r\nimport \"./TrackList.css\";\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {this.props.tracks.map(track => {\r\n          return (\r\n            <Track\r\n              onAdd={this.props.onAdd}\r\n              track={track}\r\n              key={track.id}\r\n              onRemove={this.props.onRemove}\r\n              isRemoval={this.props.isRemoval}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrackList;\r\n","import React from \"react\";\r\nimport \"./SearchResults.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList\r\n          onAdd={this.props.onAdd}\r\n          isRemoval={false}\r\n          tracks={this.props.searchResults}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\r\nimport \"./Playlist.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input onChange={this.handleNameChange} defaultValue={\"NewPlaylist\"} />\r\n        <TrackList\r\n          isRemoval={true}\r\n          onRemove={this.props.onRemove}\r\n          tracks={this.props.playlistTracks}\r\n        />\r\n        <button onClick={this.props.onSave} className=\"Playlist-save\">\r\n          SAVE TO SPOTIFY\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: \"My Playlist\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: []\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Play<span className=\"highlight\">list</span>ify\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              onAdd={this.addTrack}\n              searchResults={this.state.searchResults}\n            />\n            <Playlist\n              onSave={this.savePlaylist}\n              onNameChange={this.updatePlaylistName}\n              onRemove={this.removeTrack}\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"../src/components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}